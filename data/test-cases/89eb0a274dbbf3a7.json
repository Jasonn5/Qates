{"uid":"89eb0a274dbbf3a7","name":"test_get_calls_with_param_maxsize_invalid_data","fullName":"tests.calls.test_get_calls#test_get_calls_with_param_maxsize_invalid_data","historyId":"1f400d0904f9bc254e2cecf8697ffa8a","time":{"start":1720649515077,"stop":1720649515249,"duration":172},"status":"failed","statusMessage":"AssertionError: Expected status code 400 but got 403","statusTrace":"get_header_cookie = <function get_header_cookie.<locals>._get_headers_withCookie_and_auth at 0x7f13a677ede0>\n\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_get_calls_with_param_maxsize_invalid_data(get_header_cookie):\n        url = EndpointCalls.get_call_with_params()\n        headers = Auth().auth_valid_credential(get_header_cookie)\n        test_params = CALL_PARAM.copy()\n        test_params['maxSize'] = '2032+-*-/*-489589438345'\n        response = EspoCRMRequest.get_with_url_headers_params(url, params=test_params, headers=headers)\n        print(\"\\n This is the status-code of the response: \" + str(response.status_code))\n>       assert_status_bad_request(response)\n\ntests/calls/test_get_calls.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    def assert_status_bad_request(response):\n>       assert response.status_code == 400, f\"Expected status code 400 but got {response.status_code}\"\nE       AssertionError: Expected status code 400 but got 403\n\ncore/assertions/status.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_header_cookie","time":{"start":1720649515077,"stop":1720649515077,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400 but got 403","statusTrace":"get_header_cookie = <function get_header_cookie.<locals>._get_headers_withCookie_and_auth at 0x7f13a677ede0>\n\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_get_calls_with_param_maxsize_invalid_data(get_header_cookie):\n        url = EndpointCalls.get_call_with_params()\n        headers = Auth().auth_valid_credential(get_header_cookie)\n        test_params = CALL_PARAM.copy()\n        test_params['maxSize'] = '2032+-*-/*-489589438345'\n        response = EspoCRMRequest.get_with_url_headers_params(url, params=test_params, headers=headers)\n        print(\"\\n This is the status-code of the response: \" + str(response.status_code))\n>       assert_status_bad_request(response)\n\ntests/calls/test_get_calls.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    def assert_status_bad_request(response):\n>       assert response.status_code == 400, f\"Expected status code 400 but got {response.status_code}\"\nE       AssertionError: Expected status code 400 but got 403\n\ncore/assertions/status.py:26: AssertionError","steps":[],"attachments":[{"uid":"d17f89b15a7eeb8d","name":"stdout","source":"d17f89b15a7eeb8d.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.calls"},{"name":"suite","value":"test_get_calls"},{"name":"host","value":"fv-az975-252"},{"name":"thread","value":"2142-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.calls.test_get_calls"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression"]},"source":"89eb0a274dbbf3a7.json","parameterValues":[]}