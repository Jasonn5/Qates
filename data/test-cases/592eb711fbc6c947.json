{"uid":"592eb711fbc6c947","name":"test_post_email_insert_image_invalid_email_id","fullName":"tests.mail_important.test_post_email_insert_image#test_post_email_insert_image_invalid_email_id","historyId":"912add095aabb57d2d5ca80e75692ae5","time":{"start":1720636499808,"stop":1720636499877,"duration":69},"description":"\n    Verify addition of image to email with invalid email ID - status code 400 Bad Request\n    ","descriptionHtml":"<pre><code>Verify addition of image to email with invalid email ID - status code 400 Bad Request\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Expected status code 400 but got 405","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7ff06a81d6c0>\ninvalid_email_id_payload = {'emailId': 'invalidEmailId', 'imageData': 'base64ImageData'}\n\n    @pytest.mark.functional\n    @pytest.mark.regression\n    @allure.feature('Email Insert Image')\n    @allure.story('Post Email Insert Image')\n    def test_post_email_insert_image_invalid_email_id(get_headers, invalid_email_id_payload):\n        \"\"\"\n        Verify addition of image to email with invalid email ID - status code 400 Bad Request\n        \"\"\"\n        url = f\"{BASE_URI}{EndpointCorreoImportant.POST_EMAIL_INSERT_IMAGE.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = EspoCRMRequest.post_json(url, headers, invalid_email_id_payload)\n>       assert_status_bad_request(response)\n\ntests/mail_important/test_post_email_insert_image.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [405]>\n\n    def assert_status_bad_request(response):\n>       assert response.status_code == 400, f\"Expected status code 400 but got {response.status_code}\"\nE       AssertionError: Expected status code 400 but got 405\n\ncore/assertions/status.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"invalid_email_id_payload","time":{"start":1720636499808,"stop":1720636499808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_headers","time":{"start":1720636499808,"stop":1720636499808,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Post Email Insert Image"},{"name":"feature","value":"Email Insert Image"},{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.mail_important"},{"name":"suite","value":"test_post_email_insert_image"},{"name":"host","value":"fv-az700-299"},{"name":"thread","value":"2073-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.mail_important.test_post_email_insert_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression"]},"source":"592eb711fbc6c947.json","parameterValues":[]}