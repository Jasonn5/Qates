{"uid":"b186b64dc19b5400","name":"test_post_email_insert_image_check_response_content_type","fullName":"tests.mail_important.test_post_email_insert_image#test_post_email_insert_image_check_response_content_type","historyId":"a603dd7df67ce46fef584933b3b988a9","time":{"start":1720636500053,"stop":1720636500120,"duration":67},"description":"\n    Verify addition of image to email and check response content type - status code 200 OK\n    ","descriptionHtml":"<pre><code>Verify addition of image to email and check response content type - status code 200 OK\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Expected status code 200 but got 405","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7ff06a7085e0>\nemail_insert_image_payload = {'emailId': 'validEmailId', 'imageData': 'base64ImageData'}\n\n    @pytest.mark.smoke\n    @pytest.mark.functional\n    @pytest.mark.regression\n    @allure.feature('Email Insert Image')\n    @allure.story('Post Email Insert Image')\n    def test_post_email_insert_image_check_response_content_type(get_headers, email_insert_image_payload):\n        \"\"\"\n        Verify addition of image to email and check response content type - status code 200 OK\n        \"\"\"\n        url = f\"{BASE_URI}{EndpointCorreoImportant.POST_EMAIL_INSERT_IMAGE.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = EspoCRMRequest.post_json(url, headers, email_insert_image_payload)\n>       assert_status_code_ok(response)\n\ntests/mail_important/test_post_email_insert_image.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [405]>\n\n    def assert_status_code_ok(response):\n>       assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\nE       AssertionError: Expected status code 200 but got 405\n\ncore/assertions/status.py:2: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"email_insert_image_payload","time":{"start":1720636500052,"stop":1720636500052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_headers","time":{"start":1720636500052,"stop":1720636500052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Post Email Insert Image"},{"name":"feature","value":"Email Insert Image"},{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.mail_important"},{"name":"suite","value":"test_post_email_insert_image"},{"name":"host","value":"fv-az700-299"},{"name":"thread","value":"2073-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.mail_important.test_post_email_insert_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression","smoke"]},"source":"b186b64dc19b5400.json","parameterValues":[]}