{"uid":"ef95b6fd6f9c9c4b","name":"test_post_email_insert_image_large_image_size","fullName":"tests.mail_important.test_post_email_insert_image#test_post_email_insert_image_large_image_size","historyId":"a8770a6fcf27efeeeee2b9c0078afa2a","time":{"start":1720628456632,"stop":1720628456725,"duration":93},"description":"\n    Verify addition of image to email with large image size - status code 413 Request Entity Too Large\n    ","descriptionHtml":"<pre><code>Verify addition of image to email with large image size - status code 413 Request Entity Too Large\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 405 == 413\n +  where 405 = <Response [405]>.status_code","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7fa7bcf88f40>\nlarge_image_payload = {'emailId': 'validEmailId', 'imageData': 'largeBase64ImageData'}\n\n    @pytest.mark.functional\n    @pytest.mark.regression\n    @allure.feature('Email Insert Image')\n    @allure.story('Post Email Insert Image')\n    def test_post_email_insert_image_large_image_size(get_headers, large_image_payload):\n        \"\"\"\n        Verify addition of image to email with large image size - status code 413 Request Entity Too Large\n        \"\"\"\n        url = f\"{BASE_URI}{EndpointCorreoImportant.POST_EMAIL_INSERT_IMAGE.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = EspoCRMRequest.post_json(url, headers, large_image_payload)\n>       assert response.status_code == 413\nE       assert 405 == 413\nE        +  where 405 = <Response [405]>.status_code\n\ntests/mail_important/test_post_email_insert_image.py:121: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"large_image_payload","time":{"start":1720628456632,"stop":1720628456632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_headers","time":{"start":1720628456632,"stop":1720628456632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"story","value":"Post Email Insert Image"},{"name":"feature","value":"Email Insert Image"},{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.mail_important"},{"name":"suite","value":"test_post_email_insert_image"},{"name":"host","value":"fv-az1543-419"},{"name":"thread","value":"2071-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.mail_important.test_post_email_insert_image"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression"]},"source":"ef95b6fd6f9c9c4b.json","parameterValues":[]}