{"uid":"21e645416b91f7b4","name":"test_get_drafts_without_auth_token_secret","fullName":"tests.mail_draft.test_get_email_draft#test_get_drafts_without_auth_token_secret","historyId":"fb4c56c8a5f75e9844a8e70715670ab0","time":{"start":1720649799909,"stop":1720649800048,"duration":139},"status":"failed","statusMessage":"AssertionError: Expected status code 401 but got 200","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7fa436e05120>\n\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_get_drafts_without_auth_token_secret(get_headers):\n        url = f\"{BASE_URI}{EndpointEmail.GET_EMAIL_WITH_PARAMS.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        if \"Cookie\" in headers:\n            del headers[\"Cookie\"]\n        response = requests.get(url, headers=headers)\n>       assert_status_code_unauthorized(response)\n\ntests/mail_draft/test_get_email_draft.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    def assert_status_code_unauthorized(response):\n>       assert response.status_code == 401, f\"Expected status code 401 but got {response.status_code}\"\nE       AssertionError: Expected status code 401 but got 200\n\ncore/assertions/status.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1720649799909,"stop":1720649799909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"teardown","time":{"start":1720649799909,"stop":1720649799909,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 401 but got 200","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7fa436e05120>\n\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_get_drafts_without_auth_token_secret(get_headers):\n        url = f\"{BASE_URI}{EndpointEmail.GET_EMAIL_WITH_PARAMS.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        if \"Cookie\" in headers:\n            del headers[\"Cookie\"]\n        response = requests.get(url, headers=headers)\n>       assert_status_code_unauthorized(response)\n\ntests/mail_draft/test_get_email_draft.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    def assert_status_code_unauthorized(response):\n>       assert response.status_code == 401, f\"Expected status code 401 but got {response.status_code}\"\nE       AssertionError: Expected status code 401 but got 200\n\ncore/assertions/status.py:18: AssertionError","steps":[],"attachments":[{"uid":"9cd6ffdb51e1ad51","name":"stdout","source":"9cd6ffdb51e1ad51.txt","type":"text/plain","size":5293}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[{"name":"teardown::0","time":{"start":1720649800053,"stop":1720649800127,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.mail_draft"},{"name":"suite","value":"test_get_email_draft"},{"name":"host","value":"fv-az530-126"},{"name":"thread","value":"2053-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.mail_draft.test_get_email_draft"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression"]},"source":"21e645416b91f7b4.json","parameterValues":[]}