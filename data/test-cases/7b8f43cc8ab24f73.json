{"uid":"7b8f43cc8ab24f73","name":"test_method_not_allowed","fullName":"tests.task.test_post_create_task#test_method_not_allowed","historyId":"87293b4495e40fc1e5c9d382e119bd90","time":{"start":1720652357589,"stop":1720652358171,"duration":582},"status":"failed","statusMessage":"AssertionError: Expected status code 405 but got 403","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f09c15ddc60>\n\n    @allure.suite('EspoCRM')\n    @allure.sub_suite('Freddy')\n    @allure.epic('EspoCRM')\n    @allure.feature('Task')\n    @allure.story('Create Task')\n    @allure.tag('author: Freddy')\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_method_not_allowed(get_headers):\n        url = TaskEnpoints.post_task_without_params()\n        headers = Auth().auth_valid_credential(get_headers)\n        response_get = EspoCRMRequest.get_with_url_headers(url,headers)\n        response_delete = EspoCRMRequest.delete(url, headers)\n>       assert_status_code_method_not_allowed(response_get)\n\ntests/task/test_post_create_task.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    def assert_status_code_method_not_allowed(response):\n>       assert response.status_code == 405, f\"Expected status code 405 but got {response.status_code}\"\nE       AssertionError: Expected status code 405 but got 403\n\ncore/assertions/status.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1720652357589,"stop":1720652357589,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 405 but got 403","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f09c15ddc60>\n\n    @allure.suite('EspoCRM')\n    @allure.sub_suite('Freddy')\n    @allure.epic('EspoCRM')\n    @allure.feature('Task')\n    @allure.story('Create Task')\n    @allure.tag('author: Freddy')\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_method_not_allowed(get_headers):\n        url = TaskEnpoints.post_task_without_params()\n        headers = Auth().auth_valid_credential(get_headers)\n        response_get = EspoCRMRequest.get_with_url_headers(url,headers)\n        response_delete = EspoCRMRequest.delete(url, headers)\n>       assert_status_code_method_not_allowed(response_get)\n\ntests/task/test_post_create_task.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    def assert_status_code_method_not_allowed(response):\n>       assert response.status_code == 405, f\"Expected status code 405 but got {response.status_code}\"\nE       AssertionError: Expected status code 405 but got 403\n\ncore/assertions/status.py:30: AssertionError","steps":[],"attachments":[{"uid":"e891636baffa6421","name":"stdout","source":"e891636baffa6421.txt","type":"text/plain","size":106}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"Create Task"},{"name":"subSuite","value":"Freddy"},{"name":"epic","value":"EspoCRM"},{"name":"tag","value":"author: Freddy"},{"name":"feature","value":"Task"},{"name":"suite","value":"EspoCRM"},{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.task"},{"name":"host","value":"fv-az658-763"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.task.test_post_create_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression","author: Freddy"]},"source":"7b8f43cc8ab24f73.json","parameterValues":[]}