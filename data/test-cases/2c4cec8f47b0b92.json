{"uid":"2c4cec8f47b0b92","name":"test_get_email_schema_validation","fullName":"tests.mail_important.test_mail_important#test_get_email_schema_validation","historyId":"28ffdb54320aaa0541dd18d5e3667990","time":{"start":1720626777302,"stop":1720626778766,"duration":1464},"description":"\n    2. Verificar que el parámetro 'select' contenga algunos campos válidos - Status code 200 OK\n    ","descriptionHtml":"<pre><code>2. Verificar que el parámetro 'select' contenga algunos campos válidos - Status code 200 OK\n</code></pre>\n","status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: 'resources/schemas/mail_important.json'","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f966e08fc40>\n\n    @pytest.mark.smoke\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_get_email_schema_validation(get_headers):\n        \"\"\"\n        2. Verificar que el parámetro 'select' contenga algunos campos válidos - Status code 200 OK\n        \"\"\"\n        url = f\"{BASE_URI}{EndpointCorreoImportant.GET_CORREO_IMPORTANT.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = EspoCRMRequest.get_with_url_headers(url, headers)\n        print(\"\\n reponce del Get de correos \\n\" + str(response.json()))\n>       assert_schema_correoImportant(response.json())\n\ntests/mail_important/test_mail_important.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'list': [{'accountId': None, 'accountName': None, 'addressNameMap': None, 'assignedUserId': None, ...}, {'accountId':......}, {'accountId': None, 'accountName': None, 'addressNameMap': None, 'assignedUserId': None, ...}, ...], 'total': -1}\n\n    def assert_schema_correoImportant(instance):\n>       with open(\"resources/schemas/mail_important.json\", \"r\") as schema_file:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'resources/schemas/mail_important.json'\n\ncore/assertions/schemas.py:25: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1720626777301,"stop":1720626777301,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    2. Verificar que el parámetro 'select' contenga algunos campos válidos - Status code 200 OK\n    ","status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: 'resources/schemas/mail_important.json'","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f966e08fc40>\n\n    @pytest.mark.smoke\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_get_email_schema_validation(get_headers):\n        \"\"\"\n        2. Verificar que el parámetro 'select' contenga algunos campos válidos - Status code 200 OK\n        \"\"\"\n        url = f\"{BASE_URI}{EndpointCorreoImportant.GET_CORREO_IMPORTANT.value}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = EspoCRMRequest.get_with_url_headers(url, headers)\n        print(\"\\n reponce del Get de correos \\n\" + str(response.json()))\n>       assert_schema_correoImportant(response.json())\n\ntests/mail_important/test_mail_important.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'list': [{'accountId': None, 'accountName': None, 'addressNameMap': None, 'assignedUserId': None, ...}, {'accountId':......}, {'accountId': None, 'accountName': None, 'addressNameMap': None, 'assignedUserId': None, ...}, ...], 'total': -1}\n\n    def assert_schema_correoImportant(instance):\n>       with open(\"resources/schemas/mail_important.json\", \"r\") as schema_file:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'resources/schemas/mail_important.json'\n\ncore/assertions/schemas.py:25: FileNotFoundError","steps":[],"attachments":[{"uid":"6595de078a2ea1d2","name":"stdout","source":"6595de078a2ea1d2.txt","type":"text/plain","size":278713}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.mail_important"},{"name":"suite","value":"test_mail_important"},{"name":"host","value":"fv-az1118-575"},{"name":"thread","value":"2084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.mail_important.test_mail_important"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression","smoke"]},"source":"2c4cec8f47b0b92.json","parameterValues":[]}