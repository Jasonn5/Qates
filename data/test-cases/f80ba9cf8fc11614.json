{"uid":"f80ba9cf8fc11614","name":"test_delete_call_with_invalid_cookie","fullName":"tests.calls.test_delete_call#test_delete_call_with_invalid_cookie","historyId":"6adcb5728f40eff15f02fcfeb1126f52","time":{"start":1720626764899,"stop":1720626765022,"duration":123},"status":"failed","statusMessage":"AssertionError: Expected status code 401 but got 200","statusTrace":"setup_create_call = ({'Authorization': 'Basic YWRtaW46YWRtaW4=', 'Cookie': 'wrongCookie'}, '668eae4cd71eb2f5c', <Response [200]>)\n\n    @pytest.mark.smoke\n    @pytest.mark.functional\n    @pytest.mark.regression\n    def test_delete_call_with_invalid_cookie(setup_create_call):\n        headers, id_of_new_call, data_response = setup_create_call\n        invalid_headers = headers\n        invalid_headers['Cookie'] = 'wrongCookie'\n    \n        url = f\"{EndpointCalls.delete_call()}/{id_of_new_call}\"\n        response_delete = EspoCRMRequest.delete(url, invalid_headers)\n>       assert_status_code_unauthorized(response_delete)\n\ntests/calls/test_delete_call.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    def assert_status_code_unauthorized(response):\n>       assert response.status_code == 401, f\"Expected status code 401 but got {response.status_code}\"\nE       AssertionError: Expected status code 401 but got 200\n\ncore/assertions/status.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_header_cookie","time":{"start":1720626764773,"stop":1720626764773,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_create_call","time":{"start":1720626764773,"stop":1720626764899,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"setup_create_call::0","time":{"start":1720626765027,"stop":1720626765027,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"functional"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.calls"},{"name":"suite","value":"test_delete_call"},{"name":"host","value":"fv-az1118-575"},{"name":"thread","value":"2084-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.calls.test_delete_call"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["functional","regression","smoke"]},"source":"f80ba9cf8fc11614.json","parameterValues":[]}